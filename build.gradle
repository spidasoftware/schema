////////////////////////////////////////////////////////////////////////////////////////////////////////////
// General Gradle Settings
////////////////////////////////////////////////////////////////////////////////////////////////////////////

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'com.spidasoftware.releaseNotes'
apply plugin: 'org.owasp.dependencycheck'

group = 'com.spidasoftware'
version = '9.1.0-SNAPSHOT' // If you're changing the major version also change the currentVersion in ConverterUtils.

def schemaReleaseVersion = System.getenv("SCHEMA_RELEASE_VERSION")
if(schemaReleaseVersion){
	println "Using ENV version $schemaReleaseVersion"
	version = schemaReleaseVersion
}
description = "Schema"

sourceCompatibility = 11
targetCompatibility = 11

sourceSets {
	main {
		groovy {
			srcDir 'src/main/groovy'
		}
		resources {
			srcDir 'resources'
		}
	}
	test {
		groovy {
			srcDir 'src/test/groovy'
		}
		resources {
			srcDir 'src/test/resources'
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dependencies
////////////////////////////////////////////////////////////////////////////////////////////////////////////
buildscript {

	repositories {
		mavenCentral()
		maven { url System.getenv("ARTIFACTORY_URL_EXPOSED") }
	}

	dependencies {
		classpath (group: 'com.spidasoftware', name:'releaseNotes', version:'0.3-SNAPSHOT', changing:true)
		classpath 'org.owasp:dependency-check-gradle:6.5.0.1'
	}
}

repositories {
	mavenCentral()
	maven { url System.getenv("ARTIFACTORY_URL_EXPOSED") }
}

publishing {
	repositories {
		maven {
			url System.getenv("ARTIFACTORY_URL_EXPOSED")
			credentials {
				username = System.getenv('ARTIFACTORY_USERNAME')
				password = System.getenv('ARTIFACTORY_PASSWORD')
			}
		}
	}
}

releaseNotes {
    start = "git describe HEAD~1 --abbrev=0 --tags --match v*".execute().text.trim()
    project = "147173"
    token = "22ca5f31f85239e3039879981d321dc9"
}

dependencies {
	implementation 'commons-codec:commons-codec:1.10'
	implementation 'commons-lang:commons-lang:2.6'
	implementation group: 'org.apache.ant', name: 'ant', version: '1.10.13'
	implementation group: 'org.apache.ant', name: 'ant-launcher', version: '1.10.13'
	implementation group: 'org.codehaus.groovy', name: 'groovy-all', version:'2.5.14'
	implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'
	implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
	implementation group: 'commons-io', name: 'commons-io', version:'2.4'
	implementation 'com.github.java-json-tools:json-schema-core:1.2.14'  // fge updated to java-json-tools - results schema does not parse
	implementation 'com.networknt:json-schema-validator:1.0.30-SNAPSHOT'
	implementation group: 'org.mongodb', name:'mongo-java-driver', version:'2.11.1'
	implementation group: 'com.spidasoftware', name: 'schema-v4', version:'0.1'
	testImplementation group: 'junit', name: 'junit', version:'4.13.2'
	testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.3-groovy-2.5'
	testRuntimeOnly('net.bytebuddy:byte-buddy:1.14.2')  // so spock can create mocks
	testImplementation group: 'org.objenesis', name:'objenesis', version: '2.6'
	testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.9.2")
}

test {
	useJUnitPlatform()
    testLogging.showStandardStreams = true
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////

task buildInfo {
	def cmd = "git rev-parse --short HEAD"
	def proc = cmd.execute()
	project.ext.revision = proc.text.trim()
	cmd = "git show -s --format=%ct HEAD"
	proc = cmd.execute()
	project.ext.timestamp = proc.text.trim()
}

task assembleManifest(dependsOn:["buildInfo"]){
	doLast {
		jar {
			manifest.attributes("VCSVersion": project.ext["revision"],
								"VCSTimeStamp": project.ext["timestamp"],
								"Version": version)
		}
	}
}
jar.dependsOn assembleManifest


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Command Line Tools
////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Searches the project properties first (where the properties should be kept),
 * then the system properties (where older integrations might expect them),
 * and returns null if the property is not set.
 */
private String findPropertyAnywhere(Project project, String propertyName) {
	return project.findProperty(propertyName) ?: System.getProperty(propertyName)
}

String csvFile = findPropertyAnywhere(project, 'file')
String schema = findPropertyAnywhere(project, 'schema')
String jsonFile = findPropertyAnywhere(project, 'jsonFile')

task csv(type: JavaExec) {
	dependsOn classes

	classpath = sourceSets.main.runtimeClasspath
	main = 'com.spidasoftware.schema.conversion.PoleCSVStationConverter'
	standardInput = System.in
	standardOutput = System.out

	if(csvFile){
		def file = new File("$csvFile")
		args file.absolutePath
	}
}

task validateJson(type: JavaExec) {
	dependsOn classes

	classpath = sourceSets.main.runtimeClasspath
	main = 'com.spidasoftware.schema.validation.CommandLineValidator'
	standardInput = System.in
	standardOutput = System.out

	if (jsonFile && schema) {
		def jFile = new File("$jsonFile")
		args schema
		args jFile.absolutePath
	}
}

task printVersion() {
	doLast {
		println "SCHEMA_VERSION: ${version}"
	}
}

dependencyCheck {
	failBuildOnCVSS=9
	suppressionFile="dependency-check-suppressions.xml"
	formats = ["HTML"]
}
