////////////////////////////////////////////////////////////////////////////////////////////////////////////
// General Gradle Settings
////////////////////////////////////////////////////////////////////////////////////////////////////////////

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'releaseNotes'


group = 'com.spidasoftware'
version = '5.0.0-SNAPSHOT'
def schemaReleaseVersion = System.getenv("SCHEMA_RELEASE_VERSION")
if(schemaReleaseVersion){
	println "Using ENV version $schemaReleaseVersion"
	version = schemaReleaseVersion
}
description = "Schema"

sourceCompatibility = 1.7
targetCompatibility = 1.7

sourceSets {
	main {
		groovy {
			srcDir 'src/main/groovy'
		}
		resources {
			srcDir 'resources'
		}
	}
	test {
		groovy {
			srcDir 'src/test/groovy'
		}
		resources {
			srcDir 'src/test/resources'
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dependencies
////////////////////////////////////////////////////////////////////////////////////////////////////////////
buildscript {

	repositories {
		mavenCentral()
		maven { url System.getenv("ARTIFACTORY_URL_EXPOSED") }
	}

	dependencies {
		classpath (group: 'com.spidasoftware', name:'releaseNotes', version:'0.1-SNAPSHOT', changing:true)
	}
}

repositories {
	mavenCentral()
	maven { url System.getenv("ARTIFACTORY_URL_EXPOSED") }
}

uploadArchives {
	repositories.mavenDeployer {
		repository(url: System.getenv("ARTIFACTORY_URL_EXPOSED")) {
			authentication(userName: System.getenv("ARTIFACTORY_USERNAME"), password: System.getenv("ARTIFACTORY_PASSWORD"))
		}
	}
}

releaseNotes {
    start = "git describe HEAD~1 --abbrev=0 --tags --match v*".execute().text.trim()
    project = "147173"
    token = "22ca5f31f85239e3039879981d321dc9"
}

dependencies {
	compile 'commons-codec:commons-codec:1.10'
	compile 'commons-lang:commons-lang:2.6'
	compile group: 'org.apache.ant', name: 'ant', version: '1.9.4'
	compile group: 'org.apache.ant', name: 'ant-launcher', version: '1.9.4'
	compile group: 'org.codehaus.groovy', name: 'groovy-all', version:'2.4.5'
	compile group: 'log4j', name: 'log4j', version:'1.2.17'
	compile group: 'commons-io', name: 'commons-io', version:'2.4'
	compile group: 'com.github.fge', name: 'json-schema-validator', version:'2.1.6'
    compile group: 'org.mongodb', name:'mongo-java-driver', version:'2.11.1'

	compile group: 'junit', name: 'junit', version:'4.9'
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.0-groovy-2.4'
    testCompile group: 'cglib', name: 'cglib-nodep', version: '2.2'
	testCompile group: 'org.objenesis', name:'objenesis', version: '2.1'
}

test {
    testLogging.showStandardStreams = true
}

if (System.env.TRAVIS == 'true') {
  allprojects {
    tasks.withType(GroovyCompile) {
      groovyOptions.fork = false
    }
    tasks.withType(Test) {
      maxParallelForks = 1
      minHeapSize = '512m'
	  maxHeapSize = '1024m'
    }
  }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Command Line Tools
////////////////////////////////////////////////////////////////////////////////////////////////////////////

def csvFile = hasProperty('file') ? file : null
def schema = hasProperty('schema') ? schema: null
def jsonFile = hasProperty('jsonFile') ? jsonFile: null

task(csv, dependsOn: 'classes', type: JavaExec) {
	if(csvFile){
		def file = new File("$csvFile")
		args file.absolutePath
	}
	main = 'com.spidasoftware.schema.utils.PoleCSVStationConverter'
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	standardOutput = System.out
}

task(validateJson, dependsOn: 'classes', type: JavaExec) {
	if (jsonFile && schema) {

		def jFile = new File("$jsonFile")
		args schema
		args jFile.absolutePath
	}
	main = 'com.spidasoftware.schema.validation.CommandLineValidator'
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	standardOutput = System.out
}

task wrapper(type: Wrapper) {
	/*****************************************************************************************
		NOTES:
		1) This will also change gradle version for all subprojects.
		2) Setting url with "-all" so that the download includes gradle documentation.
		3) If you only set gradleVersion, it will append "-bin".
		http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.wrapper.Wrapper.html
 	 *****************************************************************************************/
	 distributionUrl = 'https://services.gradle.org/distributions/gradle-2.9-all.zip'
}
