////////////////////////////////////////////////////////////////////////////////////////////////////////////
// General Gradle Settings
////////////////////////////////////////////////////////////////////////////////////////////////////////////

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'releaseNotes'

group = 'com.spidasoftware'
version = '1.0.0' //for nightly build, ensure that this is the first "version" in the file and keep single quotes
description = "Schema"

sourceCompatibility = 1.7
targetCompatibility = 1.7

sourceSets {
	main {
		groovy {
			srcDir 'src/main/groovy'
		}
		resources {
			srcDir 'resources'
		}
	}
	test {
		groovy {
			srcDir 'src/test/groovy'
		}
		resources {
			srcDir 'src/test/resources'
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dependencies
////////////////////////////////////////////////////////////////////////////////////////////////////////////
buildscript {
	
	try {
		project.ext.m2Settings = [exposed:"https://dev.spidasoftware.com/artifactory/exposed-repo"]//default
		def m2Root = new XmlSlurper().parse(new File(System.getProperty("user.home"), ".m2/settings.xml"))
		def m2Spida = m2Root.servers.server.find{ it.id.text() == "spida" }
		def m2Repos = m2Root.profiles.profile.find{ it.id.text() == "artifactory" }.properties
		if(m2Spida && m2Repos){
			project.ext.m2Settings = [username: m2Spida.username.text(), password: m2Spida.password.text(), exposed: m2Repos.exposedLocation.text()]
		}
	} catch(ex){
		println ex.message //use ex.printStackTrace() if you want to show the full stacktrace 
	}
	
	//uncomment to print out maven settings
	//println "m2Settings: ${m2Settings}"

	repositories {
		mavenCentral()
		maven { url m2Settings.exposed }
	}

	dependencies {
		classpath (group: 'com.spidasoftware', name:'releaseNotes', version:'0.1-SNAPSHOT', changing:true)
	}
}

repositories {
	mavenCentral()
	maven { url m2Settings.exposed }
}

uploadArchives {
	repositories.mavenDeployer {
		repository(url: m2Settings.exposed) {
			authentication(userName: m2Settings.username, password: m2Settings.password)
		}
	}
}

releaseNotes {
	start = "v0.3"
	project = "147173"
	token = "22ca5f31f85239e3039879981d321dc9"
}

dependencies {
	compile group: 'org.apache.ant', name: 'ant', version: '1.9.4'
	compile group: 'org.apache.ant', name: 'ant-launcher', version: '1.9.4'
	compile group: 'org.codehaus.groovy', name: 'groovy-all', version:'2.1.9'
	compile group: 'junit', name: 'junit', version:'4.9'
	compile group: 'org.glassfish', name: 'javax.servlet', version:'3.0'
	compile group: "org.eclipse.jetty", name:"jetty-server", version: "9.0.6.v20130930"
	compile group: "org.eclipse.jetty", name:"jetty-servlet", version: "9.0.6.v20130930"
	compile group: 'net.sf.json-lib', name: 'json-lib', version:'2.3', classifier:'jdk15'
	compile group: 'log4j', name: 'log4j', version:'1.2.17'
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.3'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.3'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.3'
	compile group: 'commons-io', name: 'commons-io', version:'2.4'
	compile group: 'xom', name: 'xom', version:'1.2.5'
	compile group: 'com.github.fge', name: 'json-schema-validator', version:'2.1.6'
	compile group: 'org.apache.tika', name: 'tika-core', version:'1.4'
    compile group: 'org.mongodb', name:'mongo-java-driver', version:'2.11.1'

    testCompile group: 'org.spockframework', name: 'spock-core', version: '0.7-groovy-2.0'
    testCompile group: 'cglib', name: 'cglib-nodep', version: '2.2'
	testCompile group: 'org.objenesis', name:'objenesis', version: '2.1'

}

test {  
    testLogging.showStandardStreams = true  
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Command Line Tools
////////////////////////////////////////////////////////////////////////////////////////////////////////////

def csvFile = hasProperty('file') ? file : null
def schema = hasProperty('schema') ? schema: null
def jsonFile = hasProperty('jsonFile') ? jsonFile: null

task(csv, dependsOn: 'classes', type: JavaExec) {
	if(csvFile){
		def file = new File("$csvFile")
		args file.absolutePath
	}
	main = 'com.spidasoftware.schema.utils.PoleCSVStationConverter'
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	standardOutput = System.out
}

task(validateJson, dependsOn: 'classes', type: JavaExec) {
	if (jsonFile && schema) {

		def jFile = new File("$jsonFile")
		args schema
		args jFile.absolutePath
	}
	main = 'com.spidasoftware.schema.validation.CommandLineValidator'
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	standardOutput = System.out
}

task wrapper(type: Wrapper) {
	/*****************************************************************************************
		NOTES: 
		1) This will also change gradle version for all subprojects.
		2) Setting url with "-all" so that the download includes gradle documentation.
		3) If you only set gradleVersion, it will append "-bin".
		http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.wrapper.Wrapper.html
 	 *****************************************************************************************/
	distributionUrl = 'http://services.gradle.org/distributions/gradle-1.11-all.zip'
}

