////////////////////////////////////////////////////////////////////////////////////////////////////////////
// General Gradle Settings
////////////////////////////////////////////////////////////////////////////////////////////////////////////

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'releaseNotes'

group = 'com.spidasoftware'
version = '0.5.1'
description = "Schema"

sourceCompatibility = 1.7
targetCompatibility = 1.7

sourceSets {
	main {
		groovy {
			srcDir 'src/main/groovy'
		}
		resources {
			srcDir 'resources'
		}
	}
	test {
		groovy {
			srcDir 'src/test/groovy'
		}
		resources {
			srcDir 'src/test/resources'
		}
	}
}

buildscript {
	repositories{
		maven{
			credentials {
				username 'developer'
				password '{DESede}dG+RkW6Rzo7BU1y/mn5Yhw=='
			}
			url "https://www.spidasoftware.com/artifactory/repo"
		}
	}
	dependencies {
		classpath (group: 'com.spidasoftware', name:'releaseNotes', version:'0.1-SNAPSHOT', changing:true)
	}
}

repositories {
	mavenCentral()
	maven { url "https://www.spidasoftware.com/artifactory/exposed-repo" }
}

dependencies {
	compile group: 'org.codehaus.groovy', name: 'groovy-all', version:'2.1.7'
	compile group: 'junit', name: 'junit', version:'4.9'
	compile group: 'org.glassfish', name: 'javax.servlet', version:'3.0'
	compile group: "org.eclipse.jetty", name:"jetty-server", version: "9.0.6.v20130930"
	compile group: "org.eclipse.jetty", name:"jetty-servlet", version: "9.0.6.v20130930"
	compile group: 'net.sf.json-lib', name: 'json-lib', version:'2.3', classifier:'jdk15'
	compile group: 'log4j', name: 'log4j', version:'1.2.17'
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.3'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.3'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.3'
	compile group: 'commons-io', name: 'commons-io', version:'2.4'
	compile group: 'xom', name: 'xom', version:'1.2.5'
	compile group: 'com.github.fge', name: 'json-schema-validator', version:'2.1.6'
	compile group: 'org.apache.tika', name: 'tika-core', version:'1.4'


    testCompile group: 'org.spockframework', name: 'spock-core', version: '0.7-groovy-2.0'
    testCompile group: 'cglib', name: 'cglib-nodep', version: '2.2'
	testCompile group: 'org.objenesis', name:'objenesis', version: '2.1'

}

test {  
    testLogging.showStandardStreams = true  
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Command Line Tools
////////////////////////////////////////////////////////////////////////////////////////////////////////////

def csvFile = hasProperty('file') ? file : null
def schema = hasProperty('schema') ? schema: null
def jsonFile = hasProperty('jsonFile') ? jsonFile: null

task(csv, dependsOn: 'classes', type: JavaExec) {
	if(csvFile){
		def file = new File("$csvFile")
		args file.absolutePath
	}
	main = 'com.spidasoftware.schema.utils.PoleCSVStationConverter'
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	standardOutput = System.out
}

task(validateJson, dependsOn: 'classes', type: JavaExec) {
	if (jsonFile && schema) {

		def jFile = new File("$jsonFile")
		args schema
		args jFile.absolutePath
	}
	main = 'com.spidasoftware.schema.validation.CommandLineValidator'
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	standardOutput = System.out
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Read maven settings.xml (gradle does not do this yet)
////////////////////////////////////////////////////////////////////////////////////////////////////////////
private def getMavenSettings() {
	String userHome = System.getProperty("user.home");
	File mavenSettings = new File(userHome, ".m2/settings.xml")
	if(mavenSettings.exists()){
		def xmlSlurper = new XmlSlurper()
		def root = xmlSlurper.parse(mavenSettings)
		def settingsMap = [:]
		
	def locations = root."profiles"."profile".find{it."id".text() == "artifactory"}."properties"
		settingsMap.snapshots = locations."snapshotsLocation"
		settingsMap.releases = locations."releasesLocation"
		
		def serverElement = root."servers"."server".find{ it."id".text() == "spida" }
		settingsMap.username = serverElement.username.text()
		settingsMap.password = serverElement.password.text()
		return settingsMap
	} else {
		return [:]
	}
}

uploadArchives {
	def mavenSettings = getMavenSettings()
	repositories.mavenDeployer {
		repository(url: mavenSettings["releases"]) {
			authentication(userName: mavenSettings["username"], password: mavenSettings["password"])
		}
		snapshotRepository(url: mavenSettings["snapshots"]) {
			authentication(userName: mavenSettings["username"], password: mavenSettings["password"])
		}
	}
}

releaseNotes {
	start = "v0.3"
	project = "147173"
	token = "22ca5f31f85239e3039879981d321dc9"
}
